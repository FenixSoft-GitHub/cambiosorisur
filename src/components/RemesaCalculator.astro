---
import Close from "./icons/Close.astro";

interface Exchange {
  country: string;
  rate: number;
  symbol: string;
  currency: string;
}

// const exchangeRates = await db.select().from(Exchange);
interface Props {
  exchangeRates: Exchange[];
}

const { exchangeRates } = Astro.props as Props;

let amountToSend = 0;
let amountToReceive = 0;
// style="mask-image: linear-gradient(white 80%, transparent);"
---

<div class="p-3 bg-white rounded-lg shadow-md max-w-2xl mx-auto">
  <div class="relative mb-4">
    <img
      class="rounded-t-lg opacity-90"
      src="/CalculosFinan.webp"
      alt="Imagen de fondo Financiero"
    />

    <button
      popovertarget="my-popover2"
      popovertargetaction="hide"
      class="absolute top-2 right-2 bg-white/50 shadow-lg text-gray-600 hover:text-white hover:bg-red-500 rounded-full p-1"
    >
      <Close class="w-4 h-4" />
    </button>

    <h2
      class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-2xl font-semibold text-center"
    >
      Calculadora de Remesas
    </h2>
  </div>

  <div class="mb-4 grip">
    <div class="flex gap-4 flex-col-2 items-center justify-between">
      <div class="w-full">
        <label for="originCountry" class="block text-gray-700 font-medium"
          >País de Origen:</label
        >
        <select
          id="originCountry"
          class="mt-1 block w-full px-2 py-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 sm:text-sm bg-gray-800"
        >
          {
            exchangeRates.map((rate) => (
              <option
                key={rate.country}
                value={rate.rate}
                data-symbol={rate.symbol}
              >
                {rate.country}
              </option>
            ))
          }
        </select>
      </div>
      <div class="">
        <label for="rateToCountry" class="block text-gray-700 font-medium"
          >Tasa:</label
        >
        <input
          type="number"
          inputmode="decimal"
          id="rateToCountry"
          class="mt-1 text-center block w-full px-3 py-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 sm:text-sm bg-gray-800"
          readonly
        />
      </div>
    </div>
  </div>

  <div class="mb-4">
    <label for="amountToSend" class="block text-gray-700 font-medium"
      >Monto a Enviar:</label
    >
    <input
      type="number"
      inputmode="numeric"
      id="amountToSend"
      class="mt-1 block w-full pl-3 pr-2 py-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 sm:text-sm bg-gray-800"
    />
  </div>

  <div class="mb-4">
    <label for="amountToReceive" class="block text-gray-700 font-medium"
      >Monto a Recibir:</label
    >
    <input
      type="number"
      inputmode="decimal"
      id="amountToReceive"
      class="mt-1 block w-full px-3 py-1 rounded-md border-gray-300 focus:border-indigo-500 focus:ring focus:ring-indigo-200 sm:text-sm bg-gray-800"
      readonly
    />
  </div>

  <p id="rateInfo" class="text-black text-center font-semibold"></p>

  <button
    id="contacto"
    type="button"
    disabled={amountToSend <= 0}
    aria-disabled={amountToSend <= 0}
    class="bg-amber-400 hover:bg-amber-500 text-black font-bold py-2 px-4 rounded w-full"
  >
    <a href="/contacto/"> Contáctanos </a>
  </button>
</div>

<script>
  const toSend = document.getElementById("amountToSend") as HTMLInputElement;
  const rateToCountrySelect = document.getElementById(
    "originCountry"
  ) as HTMLSelectElement;
  const rateToCountry = document.getElementById(
    "rateToCountry"
  ) as HTMLInputElement;
  const amountToReceive = document.getElementById(
    "amountToReceive"
  ) as HTMLInputElement;
  const rateInfo = document.getElementById("rateInfo") as HTMLParagraphElement;

  function updateRateAndClearFields() {
    if (rateToCountrySelect && rateToCountry) {
      const selectedOption =
        rateToCountrySelect.options[rateToCountrySelect.selectedIndex];
      const selectedRate = selectedOption.value;
      const selectedSymbol = selectedOption.dataset.symbol; // Obtener el símbolo de la moneda

      rateToCountry.value = selectedRate;

      if (rateInfo) {
        rateInfo.textContent = `Tasa 1 ${selectedSymbol} = ${selectedRate} VES`;
      }
    }
    if (toSend && amountToReceive) {
      toSend.value = "";
      amountToReceive.value = "";
    }
  }

  function calculateAmountReceived() {
    if (!toSend || !rateToCountrySelect || !rateToCountry || !amountToReceive)
      return;

    const amountToSend = parseFloat(toSend.value) || 0;
    const rate = parseFloat(rateToCountrySelect.value) || 0;
    const amountToReceiveValue = amountToSend * rate;

    amountToReceive.value = amountToReceiveValue.toFixed(2);
    rateToCountry.value = rate.toFixed(2);
  }

  // Restaurar la tasa guardada en localStorage al cargar la página
  window.addEventListener("DOMContentLoaded", () => {
    const savedRate = localStorage.getItem("selectedRate");
    if (savedRate) {
      const selectedOption = [...rateToCountrySelect.options].find(
        (opt) => opt.value === savedRate
      );
      if (selectedOption) {
        rateToCountrySelect.value = savedRate;
        rateToCountry.value = savedRate;
        const savedSymbol = selectedOption.dataset.symbol;
        if (rateInfo) {
          rateInfo.textContent = `Tasa 1 ${savedSymbol} = ${savedRate} VES`;
        }
      }
    }
  });

  rateToCountrySelect.addEventListener("change", updateRateAndClearFields);
  toSend.addEventListener("input", calculateAmountReceived);
</script>